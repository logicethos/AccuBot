syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Proto.API";
package AccuBot;


service AccuBotAPI {

  // Tab for NotificationPolicy
  rpc NotificationPolicyListGet(google.protobuf.Empty) returns (NotificationPolicyList);
  rpc NotificationPolicySet(NotificationPolicy) returns (MsgReply);
  rpc NotificationPolicyDelete(ID32) returns (MsgReply);

  // Tab for Networks
  rpc NetworkListGet(google.protobuf.Empty) returns (NetworkList);
  rpc NetworkSet(Network) returns (MsgReply);
  rpc NetworkDelete(ID32) returns (MsgReply);
  
  //NetworkStatus
  rpc NetworkStatusStream(google.protobuf.Empty) returns (stream NetworkStatus);

  //Tab for NodeGroups
  rpc NodeGroupListGet(google.protobuf.Empty) returns (NodeGroupList); //You will also need to get NetworkListGet & NotificationPolicy for the combo dropdown.
  rpc NodeGroupSet(NodeGroup) returns (MsgReply);
  rpc NodeGroupDelete(ID32) returns (MsgReply);

  //Tab for Nodes
  rpc NodeListGet(google.protobuf.Empty) returns (NodeList);  //You will also need to get the NodeGroupListGet for the combo dropdown.
  rpc NodeSet(Node) returns (MsgReply);
  rpc NodeDelete(ID32) returns (MsgReply);
  
  //NodeStatus
  rpc NodeStatusStream(google.protobuf.Empty) returns (stream NodeStatus);
  
  //Tab for SSL Certs
  rpc DomainCertificateListGet(google.protobuf.Empty) returns (DomainCertificateList);
  rpc DomainCertificateSet(DomainCertificate) returns (MsgReply);
  rpc DomainCertificateDelete(ID32) returns (MsgReply);

  //Tab for Settings.
  rpc SettingsGet(google.protobuf.Empty) returns (Settings);
  rpc SettingsSet(Settings) returns (MsgReply);

  //Tab for Users.  Note, this is not on a the speadsheet.  Its a simple list of users.
  rpc UserListGet(google.protobuf.Empty) returns (UserList);
  rpc UserSet(User) returns (MsgReply);
  rpc UserDelete(ID32) returns (MsgReply);
  
}

message MsgReply {
  enum Status
  {
    fail = 0;  //If an error is returned, then it would be a good idea to notify the user, with a popup, and display the message.
    ok = 1;
  }
  Status status     = 1;
  string message    = 2;  //If an error occurs, this may have a message.
  uint32 newID32    = 3;  //If a new record ID is created, this will be set. 
}

message ID32 {
  uint32 ID = 1;
}

message StreamRequest
{
  uint32 Seconds = 1;
}

enum MessageType
{
  Add           = 0;
  Update        = 1;
  Remove        = 2;
}


message Authentication  //A project for later
{
    enum twoFAtype  
  {
    Yubikey = 0;
  }

  uint32    UserID    = 1;
  string    Password  = 2;
  twoFAtype TwoFAtype = 3;
  string    TwoFAData = 4;
}


message User
{
    enum AccessRights
    {
       Read     = 0;
       Write    = 1;
       Users    = 2;
       Settings = 4;
    }
  
    uint32    UserID              = 1;  //do not display. Set to 0 for new entries only.  
    string    Name                = 2;
    string    Email               = 3;
    string    Tel                 = 4;
    string    Discord             = 5;
    uint32    AccessRightsBits    = 6;
}

message UserList
{
   repeated User users = 1;
}

message NotificationPolicy
{
    uint32    NotifictionID   = 1;    //do not display. Set to 0 for new entries only.
    string    Name            = 2;
    int32     Discord         = 3;    // -1 = off, Delay 0 - 999 Seconds
    int32     Call            = 4;    // -1 = off, Delay 0 - 999 Seconds
}
message NotificationPolicyList
{
    repeated NotificationPolicy NotificationPolicyList = 1;
}

message Network
{
    uint32    NetworkID       = 1;   //do not display. Set to 0 for new entries only.
    string    Name            = 2;
    uint32    BlockTime       = 3;   //Seconds
    uint32    StalledAfter    = 4;
    uint32    NotifictionID   = 5;   //See above
}
message NetworkList
{
    repeated Network network     = 1;
}

message NetworkStatus
{
    uint32    NetworkID       = 1;   //do not display. Set to 0 for new entries only.
    uint64    Height          = 2;
    float     AverageTime     = 3;
}


message NodeGroup
{
  uint32    NodeGroupID            = 1;  //do not display. Set to 0 for new entries only.
  string    Name                   = 2;
  uint32    NetworkID              = 3;  //See Network.NetworkID
  uint32    PingNotifictionID      = 4;  //See NotificationPolicy.NotifictionID
  uint32    HeightNotifictionID    = 5;  //See NotificationPolicy.NotifictionID
  uint32    LatencyNotifictionID   = 6;  //See NotificationPolicy.NotifictionID
}
message NodeGroupList
{
    repeated NodeGroup nodeGroup      = 1;
}

message Node
{
  uint32  NodeID       = 1;  //do not display. Set to 0 for new entries only.
  uint32  NodeGroupID  = 2;  //See NodeGroup.NodeGroupID
  string  Name         = 3;
  string  Host         = 4;
  bool    Monitor      = 5;
}

message NodeStatus
{
   uint32 NodeID      = 1;  //do not display.
   string Version     = 2;
   uint64 Height      = 3;
   float  Ping        = 4;
}

message NodeStream
{
   uint32             nodeID      = 2;
   Node               node        = 3;  //Sent with Add/Update  
   NodeStatus         nodeStatus  = 4;  //Sent with StatusUpdate
}


message NodeList
{
    repeated Node nodes      = 1;
}


message DomainCertificate
{
    uint32 DomainCertificateID  = 1;
    string Domain               = 2;
    bool   Monitor              = 3;
}
message DomainCertificateList
{
    repeated DomainCertificate  domainCertificate    = 1;
}

message Settings
{
    string BotName                     = 1;
    string DiscordClientID             = 2;
    string DiscordToken                = 3;
    uint64 AccumulateOperatorAlertsCh  = 4;
    string DiscordAlertsChannel        = 5;
    string SIPUsername                 = 6;             
    string SIPPassword                 = 7;
    string SIPHost                     = 8;
    string SIPCallingNumber            = 9;
    string TwimletURL                  = 10;
    uint32 AlarmOffWarningMinutes      = 11;
    uint32 LatencyTriggerMultiplier    = 12;
    string BotCommandPrefix            = 13;
    string EmailSMTPHost               = 14;
    uint32 EmailSMTPPort               = 15;
    string EmailUsername               = 16;
    string EmailPassword               = 17;
    string EmailFromAddress            = 18;
}